{"version":3,"sources":["component/Todo.jsx","serviceWorker.js","index.jsx","App.jsx"],"names":["Todo","_useState","useState","moment","tz","_useState2","Object","slicedToArray","date","setDate","_useState3","_useState4","data","setData","inputRef","useRef","formRef","useEffect","addItem","event","preventDefault","current","value","concat","toConsumableArray","addEventListener","dateInt","setInterval","clearInterval","removeEventListener","react_default","a","createElement","id","className","format","ref","map","x","key","fromNow","Boolean","window","location","hostname","match","ReactDOM","render","content","setContent","onClick","i","document","querySelectorAll","length","classList","e","target","dataset","name","lists","Fragment","data-name","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6dbe668.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport moment from 'moment-timezone';\n\nexport default function Todo() {\n  const [date, setDate] = useState(moment().tz('Asia/Seoul'));\n  const [data, setData] = useState([]);\n  const inputRef = useRef();\n  const formRef = useRef();\n  useEffect(() => {\n    function addItem(event) {\n      event.preventDefault();\n      if (inputRef.current.value === '') {\n        return;\n      }\n      if (inputRef.current.value === '#초기화#') {\n        setData([]);\n        inputRef.current.value = '';\n        return;\n      }\n      setDate(moment().tz('Asia/Seoul'));\n      setData([[inputRef.current.value, date], ...data]);\n      inputRef.current.value = '';\n    }\n    formRef.current.addEventListener('submit', addItem);\n    const dateInt = setInterval(() => {\n      setDate(moment().tz('Asia/Seoul'));\n    }, 500);\n    return () => {\n      clearInterval(dateInt);\n      formRef.current.removeEventListener('submit', addItem);\n    };\n  }, [date, data, inputRef]);\n  return (\n    <div id=\"todoWrap\">\n      <div className=\"title\">오늘 할일</div>\n      <p className=\"clock\">\n        {date.format('현재시각: YYYY년 MM월 DD일 HH시 mm분 ss초')}\n      </p>\n      <div className=\"content\">\n        <form ref={formRef}>\n          <input id=\"todoInput\" ref={inputRef} />\n        </form>\n        <ul id=\"todoList\">\n          {data.map(x => {\n            return (\n              <li className=\"todoItem\" key={x[1]}>\n                <span className=\"todoItemContent\">{x[0]}</span>\n                <span className=\"todoItemAgo\">{x[1].fromNow()}</span>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './reset.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react';\nimport Todo from './component/Todo';\n\nexport default function App() {\n  const [content, setContent] = useState('todo');\n  useEffect(() => {\n    function onClick(event) {\n      for (\n        let i = 0;\n        i < document.querySelectorAll('#mainMenu li').length;\n        i += 1\n      ) {\n        if (\n          document.querySelectorAll('#mainMenu li')[i].classList[0] ===\n          'selected'\n        ) {\n          document.querySelectorAll('#mainMenu li')[i].classList = '';\n        }\n      }\n      const e = event;\n      setContent(event.target.dataset.name);\n      e.target.classList = 'selected';\n    }\n    const lists = document.querySelectorAll('#mainMenu li');\n    for (let i = 0; i < lists.length; i += 1) {\n      lists[i].addEventListener('click', onClick);\n    }\n    return () => {\n      for (let i = 0; i < lists.length; i += 1) {\n        lists[i].removeEventListener('click', onClick);\n      }\n    };\n  }, [content]);\n  return (\n    <>\n      <div id=\"sidebar\">\n        <div id=\"profile\">\n          <div id=\"profileImg\" />\n          <div id=\"profileDetails\">\n            <div id=\"profileName\">이다용</div>\n            <div id=\"profileSummary\">놀이터입니다~</div>\n          </div>\n        </div>\n        <ul id=\"mainMenu\">\n          <li className=\"selected\" data-name=\"todo\">\n            오늘 할일\n          </li>\n          <li>TEST</li>\n          <li>TEST</li>\n          <li>TEST</li>\n          <li>TEST</li>\n          <li>TEST</li>\n          <li>TEST</li>\n          <li>TEST</li>\n        </ul>\n      </div>\n      <div id=\"content\">{content === 'todo' && <Todo />}</div>\n    </>\n  );\n}\n"],"sourceRoot":""}